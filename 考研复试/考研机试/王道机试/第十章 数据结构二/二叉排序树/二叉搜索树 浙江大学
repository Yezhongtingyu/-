#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
using namespace std;
/*
问题描述
判断两序列是否为同一二叉搜索树序列
输入描述
开始一个数n，(1<=n<=20) 表示有n个需要判断，n= 0 的时候输入结束。
接下去一行是一个序列，序列长度小于10，包含(0~9)的数字，没有重复数字，根据这个序列可以构造出一颗二叉搜索树。
接下去的n行有n个序列，每个序列格式跟第一个序列一样，请判断这两个序列是否能组成同一颗二叉搜索树。
输出描述
如果序列相同则输出YES，否则输出NO
样例输入
2
567432
543267
576342
0
样例输出
YES
NO
解题思路

*/

struct TreeNode{
    char data;
    TreeNode* LeftChild;
    TreeNode* rightChild;
    TreeNode(char c) : data(c), LeftChild(NULL), rightChild(NULL) {}
};

TreeNode* Insert(TreeNode* root, char x){
    if(root == NULL){
        root = new TreeNode(x);
    } else if(x < root->data){
        root->LeftChild = Insert(root->LeftChild, x);
    } else if(x > root->data){
        root->rightChild = Insert(root->rightChild, x);
    }
    return root;
}

bool JudgeSame(TreeNode*n1,TreeNode*n2){            //判断两树是否相等
    if(!n1&&!n2) return true;
    if(n1&&n2&&n1->data==n2->data){
        return JudgeSame(n1->LeftChild,n2->LeftChild)&&JudgeSame(n1->rightChild,n2->rightChild);
    }else return false;
}

int main(){
    int n;
    string str;
    while(scanf("%d", &n) != EOF){
        TreeNode* root = NULL;
        cin >> str;
        for(int i = 0; i < str.length(); ++i){
            root = Insert(root, str[i]);
        }
        while(n--){
            string str1;
            cin >> str1;
            TreeNode* root1 = NULL;
            for(int i = 0; i < str1.length(); ++i){
                root1 = Insert(root1, str1[i]);
            }

            if(JudgeSame(root,root1)){
                    cout<<"YES"<<endl;
            }else{
                    cout<<"NO"<<endl;
            }

        }
        }

    return 0;
}
