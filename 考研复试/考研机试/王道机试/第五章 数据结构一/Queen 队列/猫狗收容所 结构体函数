#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
using namespace std;
/*
问题描述
有家动物收容所只收留猫和狗，但是有特殊的收养规则。收养人有两种收养方式：
第一种为直接收养所有动物中最早进入收容所的。
第二种为选择收养的动物类型（猫或狗），并收养该种动物中最早进入收容所的。
给定一个操作序列代表所有事件。
若第一个元素为1，则代表有动物进入收容所。第二个元素为动物的编号，正数代表狗，
负数代表猫。
若第一个元素为2，则代表有人收养动物。第二个元素为若为0，则采取第一种收养方式：
若为1，则指定收养狗：若为-1.则指定收养猫。
请按顺序输出收养动物的序列。
若出现不合法的操作，即没有可以符合领养要求的动物，则将这次领养操作忽略。
输入描述
第一个时n，它代表操作序列的次数。接下来是n行，每行有两个值m和t，分别代表题目中操作的两个元素
输出描述
按顺序输出收养动物的序列，编号之间以空格间隔
样例输入
6
1 1
1 -1
2 0
1 2
2 -1
2 1
样例输出
1 -1 2
解题思路

*/

struct animal{
    int number;                                     //动物编号
    int order;                                      //次序标志
    animal(int n, int o):number(n), order(o){}      //构造函数
};

int main(){
    queue<animal> cats;
    queue<animal> dogs;
    int n;
    int order = 0;
    scanf("%d", &n);
    for(int i = 0; i < n; ++i){
        int method, type;
        scanf("%d%d", &method, &type);
        if(method == 1){
            if(type > 0){
                dogs.push(animal(type, order++));
            } else {
                cats.push(animal(type, order++));
            }
        } else {
            if(type == 0 && !dogs.empty() && !cats.empty()){
                if(dogs.front().order < cats.front().order){
                    printf("%d", dogs.front().number);
                    dogs.pop();
                } else {
                    printf("%d ", cats.front().number);
                    cats.pop();
                }
            }else if (type == 0 && dogs.empty() && !cats.empty()){
                printf("%d", cats.front().number);
                cats.pop();
            } else if(type == 0 && !dogs.empty() && cats.empty()){
                printf("%d", dogs.front().number);
                dogs.pop();
            } else if(type == 1 && !dogs.empty()){
                printf("%d", dogs.front().number);
                dogs.pop();
            } else if(type == -1 && !cats.empty()){
                printf("%d", cats.front().number);
                cats.pop();
            }
        }
    }

    printf("\n");
    return 0;
}





