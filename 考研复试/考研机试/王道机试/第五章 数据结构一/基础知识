1.vector 定义
  要使用向量vector标准模板，就要在代码中添加头文件，格式为
  #include <vector>，定义一个向量vector的写法是vector<typename> name,
  其中typename是向量元素的类型，他可以是任意的数据类型，name是所定义的名字
2.vector状态
  empty() ,当前向量是否为空
  size() ,当前元素个数
3.vector尾部元素的添加或删除
  push_back()添加，pop_back()删除
4.vector元素的访问
  ①可以像数组一般通过元素下标进行访问，下标从0到size()-1。
  ②可以通过迭代器进行访问，迭代器类似于指针。
5.vector元素操作
  任意位置插入insert()
  任意位置删除erase()
  清空clear()
6.vector迭代操作
  vector中常用的迭代器操作包括：返回向量中的首元素的迭代器begin()，返回
  向量中尾元素后一个位置的迭代器end();
  示例代码
  #include <iostream>
  #include <cstdio>
  #include <vector>
  #include <string>

  using namespace std;

  vector<int> myVector;

  int main(){
	for(int i = 0; i < 5; ++i){
		myVector.push_back(i);			//从尾部逐一添加元素
	}
	myVector.insert(myVector.begin(), 3 , 15); //头部插入3个15
	myVector.pop_back();
	for(int i = 0; i < myVector.size(); ++i){
		printf("%d", myVector[i]);
	}
	printf("\n");
	printf("the 5th element of myVector:%d\n", myVector[4]);
	printf("the size of myVector: %d\n", myVector.size());
	myVector.erase(myVector.begin() + 5, myVector.end()); //删除第5后续的元素
	vector<int>::iterator it;  //定义迭代器
	for(it = myVector.begin(); it != myVector.end(); ++it){
		printf("%d ", *it);
	}
	printf("\n");
	myVector.clear();

	return 0;
  }
	示例结果
	15 15 15 0 1 2 3
	the 5th element of myVector:1
	the size of myVector: 7
	15 15 15 0 1
