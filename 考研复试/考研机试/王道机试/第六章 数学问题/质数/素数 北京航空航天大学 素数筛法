#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
using namespace std;
/*
问题描述
输入一个整数n(2<=n<=10000)，
要求输出所有从1到这个整数之间(不包括1和这个整数)个位为1的素数，
如果没有则输出-1。
输入描述
输入有多组数据。
每组一行，输入n。
输出描述
输出所有从1到这个整数之间(不包括1和这个整数)个位为1的素数(素数之间用空格隔开，
最后一个素数后面没有空格)，如果没有则输出-1。
样例输入
100
样例输出
11 31 41 61 71
解题思路
数组标记法
*/

const int MANX = 10001;


vector<int> prime;
bool isPrime[MANX];

void Initial(){
    for(int i = 0; i < MANX; ++i){
        isPrime[i] = true;
    }
    isPrime[0] = false;
    isPrime[1] = false;
    for(int i = 2; i < MANX; ++i){
        if(!isPrime[i]){
            continue;
        }
        prime.push_back(i);
        for(int j = i * i; j < MANX; j += i){
            isPrime[j] = false;
        }
    }
    return ;
}

int main(){
    Initial();
    int n;
    while(scanf("%d", &n) != EOF){
        bool isOutput = false;
        for(int i = 0; i < prime.size() && prime[i] < n; ++i){
            if(prime[i] % 10 == 1){ //个位为1的素数
                isOutput = true;
                cout << prime[i] << " ";
            }
        }
        if(!isOutput){
            cout << "-1" ;
        }
        cout << endl;
    }


    return 0;
}
