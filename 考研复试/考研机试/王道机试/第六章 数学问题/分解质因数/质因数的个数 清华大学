#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
using namespace std;
/*
问题描述
求正整数N(N>1)的质因数的个数。 相同的质因数需要重复计算。
如120=2*2*2*3*5，共有5个质因数。
输入描述
可能有多组测试数据，每组测试数据的输入是一个正整数N，(1<N<10^9)。
输出描述
对于每组数据，输出N的质因数的个数。
样例输入
120
样例输出
5
解题思路
数组标记法
*/

const int MANX = sqrt(1e9) + 1;


vector<int> prime;
bool isPrime[MANX];

void Initial(){
    for(int i = 0; i < MANX; ++i){
        isPrime[i] = true;
    }
    isPrime[0] = false;
    isPrime[1] = false;
    for(int i = 2; i < MANX; ++i){
        if(!isPrime[i]){
            continue;
        }
        prime.push_back(i);
        for(int j = i * i; j < MANX; j += i){
            isPrime[j] = false;
        }
    }
    return ;
}

int main(){
    Initial();
    int n;
    while(scanf("%d", &n) != EOF){
        int answer = 0;
        for(int i = 0; i < prime.size() && prime[i] < n; ++i){
            int factor = prime[i];
            while(n % factor == 0){//不断试除
                n /= factor;
                answer++;
            }
        }
        if(n > 1){ //遍历完预处理之后的素数后，若n不为1则表明存在一个大于maxn的银子
            answer++;
        }
        cout << answer <<endl;
    }
    return 0;
}
