#include<iostream>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
#include<map>
using namespace std;
/*
问题描述
该题的目的是要你统计图的连通分支数。
输入描述
每个输入文件包含若干行，每行两个整数i,j，表示节点i和j之间存在一条边。
输出描述
输出每个图的联通分支数。
样例输入
1 4
4 3
5 5
样例输出
2
解题思路

*/

const int MAXN = 1000010;

int father[MAXN];
int height[MAXN];
bool visit[MAXN];

void initial(){
    for(int i = 0; i < MAXN; ++i){
        father[i] = i;
        height[i] = 0;
        visit[i] = false;
    }
    return;
}

int findfather(int x){
    if(x != father[x]){
        father[x] = findfather(father[x]);
    }
    return father[x];
}

void unionxy(int x, int y){
    x = findfather(x);
    y = findfather(y);
    if(x != y){
        if(height[x] < height[y]){
            father[x] = y;
        }else if(height[x] > height[y]){
            father[y] = x;
        }else{
            father[x] = y;
            height[y]++;
        }
    }
    return ;
}

int main(){
    int x, y;
    initial();
    while(scanf("%d %d", &x, &y) != EOF){
        visit[x] = true;
        visit[y] = true;
        unionxy(x, y);
    }
    int countn = 0;
    for(int i = 0; i < MAXN; ++i){
        if(visit[i] && father[i] == i){
            countn++;
        }
    }
    printf("%d\n", countn);

    return 0;
}
