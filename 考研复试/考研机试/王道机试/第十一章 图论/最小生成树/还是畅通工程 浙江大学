#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
#include<map>
using namespace std;
/*
问题描述
某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。
省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通
（但不一定有直接的公路相连，只要能间接通过公路可达即可），
并要求铺设的公路总长度为最小。请计算最小的公路总长度。
输入描述

测试输入包含若干测试用例。
每个测试用例的第1行给出村庄数目N ( < 100 )；
随后的N(N-1)/2行对应村庄间的距离，
每行给出一对正整数，分别是两个村庄的编号，
以及此两村庄间的距离。为简单起见，村庄从1到N编号。
当N为0时，输入结束，该用例不被处理。
输出描述
对每个测试用例，在1行里输出最小的公路总长度。
样例输入
3
1 2 1
1 3 2
2 3 4
4
1 2 1
1 3 4
1 4 1
2 3 3
2 4 2
3 4 5
0
样例输出
3
5
解题思路

*/

const int MAXN = 100;

struct Edge{
    int from;//边的起点
    int to;//边的终点
    int length;//边的长度
    bool operator< (const Edge& e) const {
        return length < e.length;
    }
};

Edge edge[MAXN * MAXN];//边集
int father[MAXN];
int height[MAXN];

void initial(int n){
    for(int i = 0; i <= n; ++i){
        father[i] = i;
        height[i] = 0;
    }
}

int Find(int x){
    if(x != father[x]){
        father[x] = Find(father[x]);
    }
    return father[x];
}

void Union(int x, int y){
    x = Find(x);
    y = Find(y);
    if(x != y){//保证祖先不同，防止xy，yx情况的输入，也就是说无向图
        if(height[x] < height[y]){
            father[x] = y;
        }else if(height[y] < height[x]){
            father[y] = x;
        }else{
            father[y] = x;
            height[x]++;
        }
    }
    return;
}

int Kruskal(int n, int edgeNumber){
    initial(n);
    sort(edge, edge + edgeNumber);//按权值排序
    int sum = 0;
    for(int i = 0; i < edgeNumber; ++i){
        if(Find(edge[i].from) != Find(edge[i].to)){
            Union(edge[i].from, edge[i].to);
            sum += edge[i].length;
        }
    }
    return sum;
}

int main(){
    int n;
    while(scanf("%d", &n) != EOF){
        if(n == 0){
            break;
        }
        int edgeNumber = n * (n - 1) / 2;
        for(int i = 0; i < edgeNumber; ++i){
            scanf("%d%d%d", &edge[i].from, &edge[i].to, &edge[i].length);
        }
        int answer = Kruskal(n, edgeNumber);
        printf("%d\n", answer);
    }

    return 0;
}
