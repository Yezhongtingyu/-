#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
#include<map>
using namespace std;
/*
问题描述
省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通
（但不一定有直接的公路相连，
只要能间接通过公路可达即可）。
现得到城镇道路统计表，表中列出了任意两城镇间修建道路的费用，
以及该道路是否已经修通的状态。
现请你编写程序，计算出全省畅通需要的最低成本。
输入描述
测试输入包含若干测试用例。
每个测试用例的第1行给出村庄数目N ( 1< N < 100 )；
随后的 N(N-1)/2 行对应村庄间道路的成本及修建状态，
每行给4个正整数，分别是两个村庄的编号（从1编号到N），此两村庄间道路的成本，以及修建状态：1表示已建，0表示未建。

    当N为0时输入结束。

输出描述
每个测试用例的输出占一行，输出全省畅通需要的最低成本。
样例输入
3
1 2 1 0
1 3 2 0
2 3 4 0
3
1 2 1 0
1 3 2 0
2 3 4 1
3
1 2 1 0
1 3 2 1
2 3 4 1
0
样例输出
3
1
0
解题思路

*/

const int MAXN = 100;

struct Edge{
    int from;//边的起点
    int to;//边的终点
    int length;//边的长度
    bool operator< (const Edge& e) const {
        return length < e.length;
    }
};

Edge edge[MAXN * MAXN];//边集
int father[MAXN];
int height[MAXN];

void initial(int n){
    for(int i = 0; i <= n; ++i){
        father[i] = i;
        height[i] = 0;
    }
}

int Find(int x){
    if(x != father[x]){
        father[x] = Find(father[x]);
    }
    return father[x];
}

void Union(int x, int y){
    x = Find(x);
    y = Find(y);
    if(x != y){//保证祖先不同，防止xy，yx情况的输入，也就是说无向图
        if(height[x] < height[y]){
            father[x] = y;
        }else if(height[y] < height[x]){
            father[y] = x;
        }else{
            father[y] = x;
            height[x]++;
        }
    }
    return;
}

int Kruskal(int n, int edgeNumber){
    initial(n);
    sort(edge, edge + edgeNumber);//按权值排序，上面重定义的<是为了在这里使用
    int sum = 0;
    for(int i = 0; i < edgeNumber; ++i){
        if(Find(edge[i].from) != Find(edge[i].to)){
            Union(edge[i].from, edge[i].to);
            sum += edge[i].length;
        }
    }
    return sum;
}

int main(){
    int n;
    while(scanf("%d", &n) != EOF){
        if(n == 0){
            break;
        }
        int edgeNumber = n * (n - 1) / 2;
        for(int i = 0; i < edgeNumber; ++i){
            int status;
            scanf("%d%d%d%d", &edge[i].from, &edge[i].to, &edge[i].length, &status);
            if(status == 1){
                edge[i].length = 0;
            }
        }
        int answer = Kruskal(n, edgeNumber);
        printf("%d\n", answer);
    }

    return 0;
}
