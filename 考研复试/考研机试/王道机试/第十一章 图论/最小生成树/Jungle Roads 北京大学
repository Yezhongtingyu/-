#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
#include<map>
using namespace std;
/*
问题描述
输入描述
输出描述
样例输入
9
A 2 B 12 I 25
B 3 C 10 H 40 I 8
C 2 D 18 G 55
D 1 E 44
E 2 F 60 G 38
F 0
G 1 H 35
H 1 I 35
3
A 2 B 10 C 40
B 1 C 20
0
样例输出
216
30
解题思路

*/

const int VMAXN = 26; // 村庄的最大数
const int RMAXN = 75; // 道路的最大数
struct Road{
    int from,to;
    int cost;
};
bool cmp(Road a,Road b){// 按照维护成本排序
    return a.cost<b.cost;
}
int father[VMAXN]; // 并查集
int height[VMAXN]; // 路径的高度
Road road[VMAXN*VMAXN];
int getRoot(int x){ // 获取其根节点
    if(x!=father[x]){
        father[x] = getRoot(father[x]);
    }
    return father[x];
}
void Union(int x,int y){ // 将两个不同集合的点合并为一个并且做路径压缩
    x = getRoot(x);
    y = getRoot(y);
    if(x!=y){
        if(height[x]<height[y]){
            father[x] = y;
        }else if(height[x]>height[y]){
            father[y] = x;
        }else{
            father[y] = x;
            height[x]++;
        }
    }
}
void init(){ // 初始化函数
    for(int i=0;i<VMAXN;i++){
        father[i] = i;
        height[i] = 0;
    }
}
int Kruskal(int vNum,int rNum){ // Kruskal 算法 在本题中vNum无用
    int sum = 0;
    sort(road,road+rNum,cmp); // 给边排序
    for(int i=0;i<rNum&&vNum>1;i++){
        Road cur = road[i];
        if(getRoot(cur.from)!=getRoot(cur.to)){
            Union(cur.from,cur.to);
            sum+=cur.cost;
            vNum--;
        }
    }
    return sum;
}
int main(){
    int n;
    while(scanf("%d",&n)!=EOF&&n){
        init(); // 初始化
        char v; // 记录每次输入的村庄数
        int num,cost,rNum=0;// num 用来记录每次输入的道路条路，cost记录成本，rNum记录总的道路数
        getchar(); // 吃掉空格，如果用cin不知道这一步可不可以省去，可以自己试一下
        for(int i=0;i<n-1;i++){ // 村庄的个数
            scanf("%c%d",&v,&num); // A 2
            getchar(); // 吃掉空格
            int from = v-'A'; // 当前村庄的下标
            for(int j=0;j<num;j++){
                scanf("%c%d",&v,&cost);
                int to = v-'A'; // 目的地村庄
                road[rNum].from = from;
                road[rNum].to = to;
                road[rNum++].cost = cost;
                getchar(); // 吃掉空格和回车
            }
        }
        int answer = Kruskal(n,rNum);
        printf("%d\n",answer);
    }
    return 0;
}
