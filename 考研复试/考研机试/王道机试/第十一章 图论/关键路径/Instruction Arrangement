#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
#include<map>
#include<climits>
using namespace std;
/*
问题描述
war waw raw
输入描述
事件 活动
输出描述
样例输入
5 2
1 2 1
3 4 1

样例输出
2
解题思路

*/

const int MAXN = 1001;
const int INF = INT_MAX;

struct Edge {
    int to;//终点
    int length;//距离
    Edge(int a, int b) : to(a), length(b) {}
};

vector<Edge> graph[MAXN];
int earliest[MAXN];//最早开始时间
int latest[MAXN];//最晚开始时间
int inDegree[MAXN];//入度

void CriticalPath(int n){
    vector<int> topology;//拓扑序列
    queue<int> node;
    for(int i = 0; i < n; ++i){
        if(inDegree[i] == 0){
            node.push(i);
            earliest[i] = 1;//初始化为1
        }
    }
    while(!node.empty()){
        int u = node.front();
        topology.push_back(u);
        node.pop();
        for(int i = 0; i < graph[u].size(); ++i){
            int v = graph[u][i].to;
            int l = graph[u][i].length;
            earliest[v] = max(earliest[v], earliest[u] + l);
            inDegree[v]--;
            if(inDegree[v] == 0){
                node.push(v);
            }
        }
    }
    for(int i = topology.size() - 1; i >= 0; --i){//有点多余，应该是模板
        int u = topology[i];
        if(graph[u].size() == 0){
            latest[u] = earliest[u];//汇点的最晚开始时间初始化,该点为最后一个点
        }else {
            latest[u] = INF;//非汇点的最晚开始时间初始化
        }
        for(int j = 0; j < graph[u].size(); ++j){
            int v = graph[u][j].to;
            int l = graph[u][j].length;
            latest[u] = min(latest[u], latest[v] - l);
        }
    }
}

int main(){
    int n, m;
    while(scanf("%d%d", &n, &m) != EOF){
        memset(graph, 0, sizeof(graph));
        memset(earliest, 0, sizeof(earliest));
        memset(latest, 0, sizeof(latest));
        memset(inDegree, 0, sizeof(inDegree));
        while(m--){
            int from, to, length;
            scanf("%d%d%d", &from, &to, &length);
            graph[from].push_back(Edge(to, length));
            inDegree[to]++;
        }
    CriticalPath(n);
    int answer = 0;
    for(int i = 0; i < n; ++i){
        answer = max(answer, earliest[i]);
    }
    printf("%d\n", answer);
    }
    return 0;
}
