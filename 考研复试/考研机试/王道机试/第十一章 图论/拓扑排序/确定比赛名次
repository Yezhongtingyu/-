#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
#include<map>
#include<climits>
using namespace std;
/*
问题描述
有N个比赛队（1-500），依次以编号123N进行比赛，比赛结束后，
裁判委员会要将所有参赛队伍从前往后依次排名，
但现在裁判委员会不能直接获得每个队的比赛成绩，
只知道每场比赛场的结果，即P1赢P2，用P1，P2表示，
排名时P1在P2之前。现在请你编写程序确定排名。
输入描述
n个队伍，m描述
输出描述
给出一个符合要求的排名，
输出时队伍号之间有空格，最后一名后面没有空格。
其他说明，符合条件的排名可能不是唯一的，
此时要求输出时编号小的队伍在前；
输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排序。
样例输入
4 3
1 2
2 3
4 3

样例输出
1 2 4 3
解题思路

*/

const int MAXN = 501;

vector<int> graph[MAXN];
int inDegree[MAXN];//入度

vector<int> TopologicalSort(int n){
    vector<int> topology;//拓扑排序
    priority_queue<int, vector<int>, greater<int>> node;
    for(int i = 1; i <= n; ++i){
        if(inDegree[i] == 0){
            node.push(i);
        }
    }
    while(!node.empty()){
        int u = node.top();
        node.pop();
        topology.push_back(u);
        for(int i = 0; i < graph[u].size(); ++i){
            int v = graph[u][i];
            inDegree[v]--;
            if(inDegree[v] == 0){
                node.push(v);
            }
        }
    }
    return topology;
}

int main(){
    int n, m;
    while(scanf("%d %d", &n, &m) != EOF){
        memset(graph, 0, sizeof(graph));
        memset(inDegree, 0, sizeof(inDegree));
        while(m--){
            int from, to;
            scanf("%d %d", &from, &to);
            graph[from].push_back(to);
            inDegree[to]++;
        }
        vector<int> answer = TopologicalSort(n);
        for(int i = 0; i < answer.size(); ++i){
            if(i == 0){
                printf("%d", answer[i]);
            }else{
                printf(" %d",answer[i]);
            }
        }
        printf("\n");
    }
    return 0;
}

