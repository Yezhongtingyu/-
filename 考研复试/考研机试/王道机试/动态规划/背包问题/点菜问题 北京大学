#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
#include<map>
#include<climits>
using namespace std;
/*
问题描述

北大网络实验室经常有活动需要叫外卖，
但是每次叫外卖的报销经费的总额最大为C元，
有N种菜可以点，经过长时间的点菜，
网络实验室对于每种菜i都有一个量化的评价分数
（表示这个菜可口程度），为Vi，每种菜的价格为Pi,
问如何选择各种菜，
使得在报销额度范围内能使点到的菜的总评价分数最大。     注意：由于需要营养多样化，每种菜只能点一次。
输入描述
输入的第一行有两个整数C（1 <= C <= 1000）和
N（1 <= N <= 100），C代表总共能够报销的额度，
N>代表能点菜的数目。
接下来的N行每行包括两个在1到100之间（包括1和100）
的整数，分别表示菜的>价格和菜的评价分数。
输出描述
输出只包括一行，这一行只包含一个整数，
表示在报销额度范围内，所点的菜得到的最大评价分数。
样例输入
90 4
20 25
30 20
40 50
10 18
40 2
25 30
10 8
样例输出
95
38
解题思路

*/

const int MAXN = 1001;

int dp[MAXN];
int v[MAXN];//value
int w[MAXN];//weight

int main(){
    int n, m;
    scanf("%d%d", &m, &n);
    for(int i = 0; i < n; ++i){
        scanf("%d%d", &w[i], &v[i]);
    }
    for(int i = 0; i <= m; ++i){
        dp[i] = 0;
    }
    for(int i = 0; i < n; ++i){
        for(int j = m; j >= w[i]; --j){
            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);
        }
    }
    printf("%d\n", dp[m]);
    return 0;
}
