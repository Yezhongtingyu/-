#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
#include<map>
#include<climits>
using namespace std;
/*
问题描述
给出一个整数序列S，其中有N个数，
定义其中一个非空连续子序列T中所有数的和为T的“序列和”。 
对于S的所有非空连续子序列T，求最大的序列和。 
变量条件：N为正整数，N≤1000000，结果序列和在范围
（-2^63,2^63-1）以内。
输入描述
第一行为一个正整数N，第二行为N个整数，表示序列中的数。
输出描述
输入可能包括多组数据，对于每一组输入数据，
仅输出一个数，表示最大序列和。
样例输入
5
1 5 -3 2 4

6
1 -2 3 4 -10 6

4
-3 -1 -2 -5
样例输出
9
7
-1
解题思路
递推
*/
const int MAXN = 1000000;

long long dp[MAXN];
long long arr[MAXN];

long long MaxSubsequence(int n){
    long long maximum = 0;
    for(int i = 0; i < n; ++i){
        if(i == 0){
            dp[i] = arr[i];
        }else{
            dp[i] = max(arr[i], dp[i - 1] + arr[i]);//精髓
        }
        maximum = max(maximum, dp[i]);
    }
    return maximum;
}

int main(){
    int n;
    while(scanf("%d", &n) != EOF){
        for(int i = 0; i < n; ++i){
            scanf("%lld", &arr[i]);
        }
        long long answer = MaxSubsequence(n);
        printf("%lld\n", answer);
    }
    return 0;
}
