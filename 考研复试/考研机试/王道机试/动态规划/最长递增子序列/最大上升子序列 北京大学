#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
#include<map>
#include<climits>
using namespace std;
/*
问题描述
一个数的序列bi，当b1 < b2 < ... < bS的时候，
我们称这个序列是上升的。
对于给定的一个序列(a1, a2, ...,aN)，
我们可以得到一些上升的子序列(ai1, ai2, ..., aiK)，
这里1 <= i1 < i2 < ... < iK <= N。比如，
对于序列(1, 7, 3, 5, 9, 4, 8)，
有它的一些上升子序列，如(1, 7), (3, 4, 8)等等。
这些子序列中序列和最大为18，
为子序列(1, 3, 5, 9)的和. 你的任务，
就是对于给定的序列，求出最大上升子序列和。
注意，最长的上升子序列的和不一定是最大的，
比如序列(100, 1, 2, 3)的最大上升子序列和为100，
而最长上升子序列为(1, 2, 3)。
输入描述
输入包含多组测试数据。
每组测试数据由两行组成。
第一行是序列的长度N (1 <= N <= 1000)。
第二行给出序列中的N个整数，
这些整数的取值范围都在0到10000（可能重复）。
输出描述
对于每组测试数据，输出其最大上升子序列和。
样例输入
7
1 7 3 5 9 4 8
样例输出
18
解题思路
递推
*/

const int MAXN = 1000;

int arr[MAXN];
int dp[MAXN];

int main(){
    int n;
    while(scanf("%d", &n) != EOF){
        for(int i = 0; i < n; i++){
            scanf("%d", &height[i]);
        }
        int answer = 0;
        for(int i = 0; i < n; ++i){
            dp[i] = arr[i];
            for(int j = 0; j < i; ++j){
                if(arr[j] < arr[i]){
                    dp[i] = max(dp[i], dp[j] + arr[i]);//每次都看一看本位置是否小于前面的位置，
                }                                 //若是小于则前面的都加一，并取最大值
            }
            answer = max(answer, dp[i]);
        }
        printf("%d\n", answer);
    }
    return 0;
}
