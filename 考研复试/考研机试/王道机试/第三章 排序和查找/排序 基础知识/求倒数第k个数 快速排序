#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
using namespace std;
/*
问题描述

输入描述

输出描述

样例输入

样例输出

解题思路
快速排序 
*/
const int MAXN = 1000 + 10;

int arr[MAXN];

int Partition(int left, int right){  
    int random = left + rand() % (right - left + 1);
    swap(arr[left], arr[random]);
    while(left < right){
        while(left < right && arr[left] <= arr[right]){
            right--;
        }
        swap(arr[left], arr[right]);
        while(left < right && arr[left] <= arr[right]){
            left++;
        }
        swap(arr[left], arr[right]);
    }
    return left;
}


int QuickSort(int left, int right, int p){ //快排的查找时，会一分为二，partition 会返回 随机选择的中心值的位置
    int position = Partition(left, right); //而，中心值的位置正好是完全排序时的位置，故可以使用n-k直接找到倒数第k个
    if(position < p){
        return QuickSort(position + 1, right, p);
    }else if(position > p){
        return QuickSort(left, position - 1, p);
    }else{
        return arr[position];
    }
}

int main(){
    int n;
    scanf("%d", &n);
    for(int i = 0;i < n; i++){
        scanf("%d", &arr[i]);
    }
    int k;
    scanf("%d", &k);
    int answer = QuickSort(0, n - 1, n - k);
    printf("%d\n", answer);
    return 0;
}
