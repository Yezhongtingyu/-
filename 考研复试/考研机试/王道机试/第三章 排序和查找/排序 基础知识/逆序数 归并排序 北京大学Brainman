#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
using namespace std;
/*
问题描述
给你n个整数组成的序列，请求出序列的逆序数。
输入描述
输入有多组数据。第一行给出数据的组数，每组测试数据有第一行，
每组数据先给出序列的长度N（0<N<100），之后输入n个处于区间[-1000000,1000000]的整数。
输出描述
对每组测试数据先输出"Scenario #i"，在输出该组数据的逆序数，每组输出之间用空行分割开来。
样例输入
4
4 2 8 0 3
10 0 1 2 3 4 5 6 7 8 9
6 -42 23 6 28 -100 65537
5 0 0 0 0 0
样例输出
Scenario #1
3
Scenario #2
0
Scenario #3
5
Scenario #4
0
解题思路
归并排序
加一行成求逆序数
*/
const int MAXN = 1000 + 10;

int arr[MAXN];
int temp[MAXN];
int number;

void Combine(int left, int middle, int right){
    int i = left;
    int j = middle + 1;
    int k = left;;
    while(i <= middle && j <= right){
        if(arr[i] <= arr[j]){
            temp[k++] = arr[i++];
        } else {
            number += middle + 1 - i; //加一行成求逆序数
            temp[k++] = arr[j++];
        }
    }
    while(i <= middle){
        temp[k++] = arr[i++];
    }
    while(j <= right){
        temp[k++] = arr[j++];
    }
    for(k = left;k <= right; k++){
        arr[k] = temp[k];
    }



}


void MergeSort(int left, int right){
    if(left < right){
        int middle = left + (right - left) / 2;
        MergeSort(left, middle);
        MergeSort(middle + 1, right);
        Combine(left, middle, right);
    }
}

int main(){
    int caseNumber;
    scanf("", &caseNumber);
    for(int caseOrde = 1; caseOrde <= caseNumber; caseOrde++){
    int n;
    scanf("%d", &n);
    for(int i = 0; i < n; i++){
        scanf("%d", &arr[i]);
    }
    number = 0;
    MergeSort(0, n - 1);
    printf("Scenario #%d\n\n", caseOrde);
    printf("%d\n\n", number);
}


    return 0;
}
