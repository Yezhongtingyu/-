#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
using namespace std;
/*
问题描述
木棍组成正方形
输入描述
输出描述
样例输入
3
4 1 1 1 1
5 10 20 30 40 50
8 1 7 2 6 4 4 3 5
样例输出
yes
no
yes
解题思路

*/

const int MAXN = 25;
int side ;// 边长
int m; //树枝数目
int sticks[MAXN];
bool visit[MAXN];

bool DFS(int sum, int number, int position){
    if(number == 3){
        return true;
    }
    int sample = 0;
    for(int i = position; i < m; ++i){
        if(visit[i] || sum + sticks[i] > side || sticks[i] == sample){
            continue;
        }
        visit[i] = true;
        if(sum + sticks[i] == side){//凑成一条边
            if(DFS(0, number + 1, 0)){
                return true;
            }else{
                sample = sticks[i];//记录失败的棍子长度
            }
        }else{
            if(DFS(sum + sticks[i], number, i + 1)){
                return true;
            }else{
                sample = sticks[i];//记录失败的棍子长度
            }
        }
        visit[i] = false;
    }
    return false;
}

bool Compare(int x, int y){
    return x > y;
}

int main(){
    int n;
    scanf("%d", &n);
    while(n--){
        int length = 0; //总长
        scanf("%d", &m);//木棍数目
        for(int i = 0; i < m; ++i){
            scanf("%d", &sticks[i]);
            length += sticks[i];
        }
        memset(visit, false, sizeof(visit));
        if(length % 4 != 0){
            cout << "no" << endl;
            continue;
        }
        side = length / 4;
        sort(sticks, sticks + m, Compare);
        if(sticks[0] > side){
            cout << "no" << endl;
            continue;
        }
        if(DFS(0, 0, 0)){
            cout << "yes" << endl;
        } else {
            cout << "no" << endl;
        }
    }

    return 0;
}
