#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
using namespace std;
/*
问题描述
本题遍历整个文本串，并记录匹配成功的次数。
输入描述
输出描述
样例输入
3
BAPC
BAPC
AZA
AZAZAZA
VERDI
AVERDXIVYERDIAN
样例输出
1
3
0
解题思路
toupper
*/
#include<iostream>
using namespace std;

const int MAXM = 10000;

int nextTable[MAXM];

void GetNextTable(string pattern){
    int j = 0;
    int m = pattern.size();
    nextTable[j] = -1;
    int i = nextTable[j];
    while(j < m){  //一般为pattern.length()
        if(-1 == i || pattern[j] == pattern[i]){
            i++;
            j++;
            nextTable[j] = i;
        } else {
            i = nextTable[i];
        }
    }
    return;
}
int KMP(string text, string pattern){
    GetNextTable(pattern);
    int n = text.size();
    int m = pattern.size();
    int i = 0;
    int j = 0;
    int number = 0;//记录匹配字数
    while(i < n ){
        if(j == -1 || text[i] == pattern[j]){
            i++;
            j++;
        } else {
            j = nextTable[j];
        }
        if(j == m){
        number++;
        j = nextTable[j];
        }
    }
    return number;
    }




int main(){
    int caseNumber;
    scanf("%d",caseNumber);
    while(caseNumber--){
        string pattern, text;
        cin >> pattern >> text;
        printf("%d\n", KMP(text, pattern));
    }



    return 0;
}
