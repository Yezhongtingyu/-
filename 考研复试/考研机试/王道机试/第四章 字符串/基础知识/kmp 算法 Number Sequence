#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
using namespace std;
/*
问题描述
Given two sequences of number:a[1],a[2],.....a[n],and b[1]......b[m],(1<=m<=10000, 1<=n<=1000000)
Your task is to find a number K which make a[k] = b[1], a[k+1] = b[2],.....a[k+m-1] = b[m],
If there are more than one K exist, output the smallest one
输入描述
The first line of input is number T which indicate the number of case ,Each case contains three lines.
The first line is two numbers N and M(1<=M<=10000, 1<=N<=1000000).The second line contains n integers
which indicate a[1]....a[n],The third line contains M integers which indicate b[1]....b[m],All integers
are in the range of [-1000000,1000000]
输出描述
For each test case, you should output one line which only contain K described above, If no such k
exists, output -1 instead
样例输入
2
13 5
1 2 1 2 3 1 2 3 1 3 2 1 2
1 2 3 1 3
13 5
1 2 1 2 3 1 2 3 1 3 2 1 2
1 2 3 2 1
样例输出
6
-1
解题思路
toupper
*/
#include<iostream>
using namespace std;

const int MAXM = 10000;
const int MAXN = 1000000;

int nextTable[MAXM];
int pattern[MAXM];
int text[MAXN];

void GetNextTable(int m){
    int j = 0;
    nextTable[j] = -1;
    int i = nextTable[j];
    while(j < m){  //一般为pattern.length()
        if(-1 == i || pattern[j] == pattern[i]){
            i++;
            j++;
            nextTable[j] = i;
        } else {
            i = nextTable[i];
        }
    }
    return;
}
int KMP(int n, int m){
    GetNextTable(m);
    int i = 0;
    int j = 0;
    while(i < n && j < m){
        if(j == -1 || text[i] == pattern[j]){
            i++;
            j++;
        } else {
            j = nextTable[j];
        }
    }
    if(j == m){
        return i - j + 1;
    } else {
        return -1;
    }
}


int main(){
    int caseNumber;
    cin >> caseNumber;
    while(caseNumber--){
        int n, m;
        cin >> n >> m;
        for(int i = 0; i < n; ++i){
            cin >> text[i];
        }
        for(int j = 0; j < m; ++j){
            cin >>pattern[j];
        }
        cout << KMP(n,m);
    }



    return 0;
}

