#include<iostream>
#include<string>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<unordered_map>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<cctype>
using namespace std;
/*
问题描述
输入n值，使用递归函数，求杨辉三角形中各个位置上的值。
输入描述
一个大于等于2的整型数n
输出描述
题目可能有多组不同的测试数据，对于每组输入数据，
按题目的要求输出相应输入n的杨辉三角形。
样例输入
6
样例输出
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1
解题思路

*/
/*
int YangHui(int i, int j)//求杨辉三角形i行j列的元素值
{
    if(j==1) return 1;
    else if(j==i) return 1;
    else return YangHui(i-1, j)+YangHui(i-1, j-1);
}

int main()
{
    int n;
    while(scanf("%d", &n)!=EOF)
    {
        for(int i=2; i<=n; i++) {
            for(int j=1; j<=i; j++) {
                printf("%d", YangHui(i, j));
                if(j!=i) printf(" ");
                else printf("\n");
            }
        }
    }
    return 0;
}
*/

int YangHui(int i, int j) { //求杨辉三角形i行j列的元素值
 if(j==1) return 1;
 else if(j==i) return 1;
 else return YangHui(i-1, j)+YangHui(i-1, j-1);
}

int main() {
 int n;
 while(scanf("%d", &n)!=EOF) {
  cout<<1<<endl;
  for(int i=2; i<=n; i++) {
   for(int j=1; j<=i; j++) {
    printf("%d", YangHui(i, j));
    if(j!=i) printf(" ");
    else printf("\n");
   }
  }
 }
 return 0;
}
/*
法二：非递归
#include <stdio.h>
int n;
int a[25][25];
void GetYHTriangle(int a[][25],int n){
    int i,j;
    for(i=1;i<n;i++){
        for(j=0;j<=i;j++){
            if(j==0 || (i==j))
                a[i][j]=1;
            else
                a[i][j]=a[i-1][j-1]+a[i-1][j];
        }
    }
}
void Output(int a[][25],int n){
    int i,j;
    for(i=1;i<n;i++){
        for(j=0;j<i;j++)
            printf("%d ",a[i][j]);
        printf("%d\n",a[i][i]);
    }
}
int main(){
    while(scanf("%d",&n)!=EOF){
        GetYHTriangle(a,n);
        Output(a,n);
    }
    return 0;
}

*/
